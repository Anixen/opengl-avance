<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>01-introductions on OpenGL Avancé</title>
    <link>https://celeborn2bealive.github.io/opengl-avance/01-introduction/index.xml</link>
    <description>Recent content in 01-introductions on OpenGL Avancé</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <lastBuildDate>Thu, 29 Dec 2016 11:33:37 +0100</lastBuildDate>
    <atom:link href="https://celeborn2bealive.github.io/opengl-avance/01-introduction/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introduction</title>
      <link>https://celeborn2bealive.github.io/opengl-avance/01-introduction/</link>
      <pubDate>Thu, 29 Dec 2016 11:33:37 +0100</pubDate>
      
      <guid>https://celeborn2bealive.github.io/opengl-avance/01-introduction/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Objectifs</title>
      <link>https://celeborn2bealive.github.io/opengl-avance/01-introduction/objectifs/</link>
      <pubDate>Thu, 29 Dec 2016 11:34:23 +0100</pubDate>
      
      <guid>https://celeborn2bealive.github.io/opengl-avance/01-introduction/objectifs/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;Approfondir les connaissances en OpenGL 3+&lt;/li&gt;
&lt;li&gt;Premières implémentations de techniques avancées&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Projet&lt;/em&gt;: implementation d&amp;rsquo;articles de recherche&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;prérequis&#34;&gt;Prérequis&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Bonne connaissance du pipeline OpenGL de base (vertex shader, rasterisation, fragment shader)&lt;/li&gt;
&lt;li&gt;Maitrise des TDs des années précédentes: &lt;a href=&#34;http://laurentnoel.fr/index.php?section=teaching&amp;amp;teaching=opengl&amp;amp;teaching_section=tds&#34;&gt;http://laurentnoel.fr/index.php?section=teaching&amp;amp;teaching=opengl&amp;amp;teaching_section=tds&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Code template</title>
      <link>https://celeborn2bealive.github.io/opengl-avance/01-introduction/code-template/</link>
      <pubDate>Thu, 29 Dec 2016 11:36:02 +0100</pubDate>
      
      <guid>https://celeborn2bealive.github.io/opengl-avance/01-introduction/code-template/</guid>
      <description>

&lt;h2 id=&#34;téléchargement&#34;&gt;Téléchargement&lt;/h2&gt;

&lt;p&gt;Cloner, forker ou téléchargez le repository sur github: &lt;a href=&#34;https://github.com/Celeborn2BeAlive/opengl-avance&#34;&gt;https://github.com/Celeborn2BeAlive/opengl-avance&lt;/a&gt; (fork de préférence, plus facile de partager le code avec moi ensuite)&lt;/p&gt;

&lt;h2 id=&#34;compilation&#34;&gt;Compilation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Avec CMake&lt;/li&gt;
&lt;li&gt;Support de GCC 5+ et Visual Studio 2015&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;linux&#34;&gt;Linux&lt;/h3&gt;

&lt;p&gt;En console:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Créer un repertoire &lt;em&gt;opengl-avance-build&lt;/em&gt; à coté du repertoire &lt;em&gt;opengl-avance&lt;/em&gt; (correspondant au clone du repo)&lt;/li&gt;
&lt;li&gt;Se placer dans &lt;em&gt;opengl-avance-build&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Taper la commande &lt;strong&gt;cmake ../opengl-avance&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Compiler avec &lt;strong&gt;make -j&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Les executables sont compilés dans le repertoire &lt;strong&gt;bin&lt;/strong&gt; du dossier de build&lt;/p&gt;

&lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Téléchargez et installez CMake GUI (&lt;a href=&#34;https://cmake.org/download/&#34;&gt;https://cmake.org/download/&lt;/a&gt; le Windows win64-x64 Installer ou Windows win32-x86 Installer selon votre CPU) et Visual Studio Community Edition 2015 (&lt;a href=&#34;https://www.visualstudio.com/fr/vs/community/&#34;&gt;https://www.visualstudio.com/fr/vs/community/&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Créer un repertoire &lt;em&gt;opengl-avance-build&lt;/em&gt; à coté du repertoire &lt;em&gt;opengl-avance&lt;/em&gt; (correspondant au clone du repo)&lt;/li&gt;
&lt;li&gt;Lancer CMake GUI, choisir comme repertoire source le clone du repo et comme repertoire de build le dossier que vous avez créé&lt;/li&gt;
&lt;li&gt;Cliquer sur Configure et choisir comme generateur: &amp;ldquo;Visual Studio 14 2015 Win64&amp;rdquo; pour un CPU 64-bits, &amp;ldquo;Visual Studio 14 2015&amp;rdquo; pour un CPU 32-bits&lt;/li&gt;
&lt;li&gt;Cliquer sur Generate&lt;/li&gt;
&lt;li&gt;Ouvrir la solution Visual Studio &lt;strong&gt;opengl.sln&lt;/strong&gt; qui a été créée par CMake dans le repertoire de build&lt;/li&gt;
&lt;li&gt;Dans le panel &amp;ldquo;Explorateur de solutions&amp;rdquo;, choisir le projet &amp;ldquo;template&amp;rdquo; comme projet de démarage (clic droit dessus, puis trouver l&amp;rsquo;option)&lt;/li&gt;
&lt;li&gt;Menu &amp;ldquo;Générer&amp;rdquo; -&amp;gt; &amp;ldquo;Générer la solution&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Lancer l&amp;rsquo;application avec F5 (debug) ou Ctrl+F5 (non debug)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Les executables sont compilés dans les repertoire &lt;strong&gt;bin&lt;/strong&gt;/Debug et &lt;strong&gt;bin&lt;/strong&gt;/Release selon la configuration.&lt;/p&gt;

&lt;p&gt;Il est possible de compiler le projet &amp;ldquo;INSTALL&amp;rdquo; de la solution avec que les executables compilés soit recopiés dans un repertoire d&amp;rsquo;installation. Par défault ce repertoire est &lt;strong&gt;C:/Program Files/opengl&lt;/strong&gt; mais il est possible de le changer depuis CMake GUI en recherchant la variable &lt;strong&gt;CMAKE_INSTALL_PREFIX&lt;/strong&gt; et en la modifiant.&lt;/p&gt;

&lt;h2 id=&#34;structure&#34;&gt;Structure&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;apps &lt;em&gt;Contiendra le code des executables qui seront créés&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;cmake &lt;em&gt;Contient des modules cmake&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;lib &lt;em&gt;Contiendra le code partagé entre les executables&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;third-party &lt;em&gt;Contient des bibliothèques externes&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chaque sous-repertoire de &lt;strong&gt;apps&lt;/strong&gt; est compilé en tant qu&amp;rsquo;application differente. Ainsi le repertoire &lt;strong&gt;apps/template&lt;/strong&gt; actuellement présent sera compilé en l&amp;rsquo;executable &lt;strong&gt;template&lt;/strong&gt; (Linux) ou &lt;strong&gt;template.exe&lt;/strong&gt; (Windows).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;lib&lt;/strong&gt; est destiné à contenir du code d&amp;rsquo;une lib (nommée &lt;strong&gt;glmlv&lt;/strong&gt;) partagée entre les executables.&lt;/p&gt;

&lt;p&gt;Afin de garder un code clair, je vous conseille de créer une application différente par theme de TP. Il faudra également créer une application pour le projet.&lt;/p&gt;

&lt;h2 id=&#34;shaders&#34;&gt;Shaders&lt;/h2&gt;

&lt;p&gt;Pour ce qui concerne les shaders, le processus de compilation se charge de les copier à coté des executables afin qu&amp;rsquo;il soient facilement accessible de manière relative par ces dernier. Leur extension doit être &amp;ldquo;.glsl&amp;rdquo; afin qu&amp;rsquo;ils soient reconnu, et ils doivent être placés dans un sous repertoire &lt;strong&gt;shaders&lt;/strong&gt; de l&amp;rsquo;application qui les utilise. Par convention, on suffixera &amp;ldquo;.vs.glsl&amp;rdquo; les vertex shader, &amp;ldquo;.fs.glsl&amp;rdquo; les fragments shaders, &amp;ldquo;.gs.glsl&amp;rdquo; les geometry shaders et &amp;ldquo;.cs.glsl&amp;rdquo; les compute shaders.&lt;/p&gt;

&lt;p&gt;La lib &lt;strong&gt;glmlv&lt;/strong&gt; peut également contenir des shaders partagés entre les applications, en les plaçant dans le repertoire &lt;strong&gt;lib/shaders&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Supposons l&amp;rsquo;arborescence suivante pour les shaders de &lt;strong&gt;apps&lt;/strong&gt; et &lt;strong&gt;libs&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;apps

&lt;ul&gt;
&lt;li&gt;template
-shaders
    - triangle.vs.glsl
    - triangle.fs.glsl&lt;/li&gt;
&lt;li&gt;smab

&lt;ul&gt;
&lt;li&gt;shaders

&lt;ul&gt;
&lt;li&gt;shadow_mapping

&lt;ul&gt;
&lt;li&gt;sm.vs.glsl&lt;/li&gt;
&lt;li&gt;sm.fs.glsl&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;deferred

&lt;ul&gt;
&lt;li&gt;gbuffer.vs.glsl&lt;/li&gt;
&lt;li&gt;gbuffer.fs.glsl&lt;/li&gt;
&lt;li&gt;shading.vs.glsl&lt;/li&gt;
&lt;li&gt;shading.fs.glsl&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;lib

&lt;ul&gt;
&lt;li&gt;shaders

&lt;ul&gt;
&lt;li&gt;post-processing

&lt;ul&gt;
&lt;li&gt;blur.cs.glsl&lt;/li&gt;
&lt;li&gt;dof.cs.glsl&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On a ici deux applications &lt;strong&gt;template&lt;/strong&gt; et &lt;strong&gt;smab&lt;/strong&gt;, contenant chacune des shaders différents et partageant deux shaders de &lt;strong&gt;glmlv&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Cette arborescence sera reproduite de la manière suivante dans le repertoire de build:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;opengl-avance-build

&lt;ul&gt;
&lt;li&gt;bin

&lt;ul&gt;
&lt;li&gt;template.exe&lt;/li&gt;
&lt;li&gt;smab.exe&lt;/li&gt;
&lt;li&gt;shaders

&lt;ul&gt;
&lt;li&gt;glmlv

&lt;ul&gt;
&lt;li&gt;post-processing

&lt;ul&gt;
&lt;li&gt;blur.cs.glsl&lt;/li&gt;
&lt;li&gt;dof.cs.glsl&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;template

&lt;ul&gt;
&lt;li&gt;triangle.vs.glsl&lt;/li&gt;
&lt;li&gt;triangle.fs.glsl&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;deferred

&lt;ul&gt;
&lt;li&gt;gbuffer.vs.glsl&lt;/li&gt;
&lt;li&gt;gbuffer.fs.glsl&lt;/li&gt;
&lt;li&gt;shading.vs.glsl&lt;/li&gt;
&lt;li&gt;shading.fs.glsl&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Bibliotheques externes</title>
      <link>https://celeborn2bealive.github.io/opengl-avance/01-introduction/lib-externes/</link>
      <pubDate>Thu, 29 Dec 2016 12:24:50 +0100</pubDate>
      
      <guid>https://celeborn2bealive.github.io/opengl-avance/01-introduction/lib-externes/</guid>
      <description>&lt;p&gt;Le template contient plusieurs bibliothèques externes (dans &lt;strong&gt;third-party&lt;/strong&gt;) afin de vous simplifier la vie:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;glfw&lt;/strong&gt; (&lt;a href=&#34;http://www.glfw.org/):&#34;&gt;http://www.glfw.org/):&lt;/a&gt; bibliothèque de fenetrage et de gestion d&amp;rsquo;inputs (similaire à la SDL)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;glm&lt;/strong&gt; (&lt;a href=&#34;http://glm.g-truc.net/):&#34;&gt;http://glm.g-truc.net/):&lt;/a&gt; bibliothèque de maths &amp;ldquo;à la GLSL&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;glad&lt;/strong&gt; (&lt;a href=&#34;http://glad.dav1d.de/):&#34;&gt;http://glad.dav1d.de/):&lt;/a&gt; bibliothèque pour &amp;ldquo;charger&amp;rdquo; les fonctions OpenGL 3+ (similaire à GLEW)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;imgui&lt;/strong&gt; (&lt;a href=&#34;https://github.com/ocornut/imgui):&#34;&gt;https://github.com/ocornut/imgui):&lt;/a&gt; bibliotheque permettant d&amp;rsquo;afficher une interface utilisateur de manière simple et en &amp;ldquo;immediate mode&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;json&lt;/strong&gt; (&lt;a href=&#34;https://github.com/nlohmann/json):&#34;&gt;https://github.com/nlohmann/json):&lt;/a&gt; bibliotheque pour lire/écrire des fichiers json, pratique pour gérer rapidement des fichiers de config&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tinyobjloader&lt;/strong&gt; (&lt;a href=&#34;https://github.com/syoyo/tinyobjloader):&#34;&gt;https://github.com/syoyo/tinyobjloader):&lt;/a&gt; bibliotheque pour charger des fichiers OBJ (format simple de scenes 3D)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mon objectif n&amp;rsquo;étant pas de vous apprendre à utiliser ces libs, je détaillerais assez peu leurs fonctionnalités dans les TPs. Les liens ci-dessus redirige vers des documentations assez complètes pour que vous puissiez vous débrouiller :)&lt;/p&gt;

&lt;p&gt;A noter que ImGui fournie une fonction ImGui::ShowTestWindow dont le code montre des exemples d&amp;rsquo;utilisation d&amp;rsquo;a peu près tous les widgets de la lib. Le code de cette fonction est dans le fichier &lt;em&gt;imgui_demo.cpp&lt;/em&gt; du repertoire contenant la lib.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Projet</title>
      <link>https://celeborn2bealive.github.io/opengl-avance/01-introduction/projet/</link>
      <pubDate>Thu, 29 Dec 2016 11:50:50 +0100</pubDate>
      
      <guid>https://celeborn2bealive.github.io/opengl-avance/01-introduction/projet/</guid>
      <description>&lt;p&gt;L&amp;rsquo;objectif du projet est de développer une demo courte implémentant une ou plusieurs techniques vues en TP, ainsi qu&amp;rsquo;une méthode non vue en TD, ou d&amp;rsquo;un article de recherche. Le choix de l&amp;rsquo;article est libre mais vous devez me le proposer avant afin que je valide. Si vous n&amp;rsquo;avez pas d&amp;rsquo;idées, voici une liste d&amp;rsquo;articles possibles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shadow Volumes&lt;/li&gt;
&lt;li&gt;Normal Mapping&lt;/li&gt;
&lt;li&gt;Screen Space Ambiant Occlusion&lt;/li&gt;
&lt;li&gt;Rendu temps réel d&amp;rsquo;objets diffus avec une env map grace aux harmoniques spheriques (&lt;a href=&#34;http://cseweb.ucsd.edu/~ravir/papers/envmap/&#34;&gt;http://cseweb.ucsd.edu/~ravir/papers/envmap/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Reflective shadow mapping (&lt;a href=&#34;http://www.klayge.org/material/3_12/GI/rsm.pdf&#34;&gt;http://www.klayge.org/material/3_12/GI/rsm.pdf&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Imperfect shadow maps (&lt;a href=&#34;http://resources.mpi-inf.mpg.de/ImperfectShadowMaps/ISM.pdf&#34;&gt;http://resources.mpi-inf.mpg.de/ImperfectShadowMaps/ISM.pdf&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Clustered Shading (&lt;a href=&#34;http://www.cse.chalmers.se/~uffe/clustered_shading_preprint.pdf&#34;&gt;http://www.cse.chalmers.se/~uffe/clustered_shading_preprint.pdf&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Screen Space Ray Tracing (&lt;a href=&#34;http://jcgt.org/published/0003/04/04/&#34;&gt;http://jcgt.org/published/0003/04/04/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Virtual Spherical Gaussian Lights for Real-time Glossy Indirect Illumination (&lt;a href=&#34;http://www.jp.square-enix.com/tech/library/pdf/Virtual%20Spherical%20Gaussian%20Lights%20for%20Real-Time%20Glossy%20Indirect%20Illumination.pdf&#34;&gt;http://www.jp.square-enix.com/tech/library/pdf/Virtual%20Spherical%20Gaussian%20Lights%20for%20Real-Time%20Glossy%20Indirect%20Illumination.pdf&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Des endroit ou trouver des articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jcgt.org/read.html?reload=1&#34;&gt;http://jcgt.org/read.html?reload=1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kesen.realtimerendering.com/&#34;&gt;http://kesen.realtimerendering.com/&lt;/a&gt; (en particulier les articles de la conférence I3D)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Liens</title>
      <link>https://celeborn2bealive.github.io/opengl-avance/01-introduction/liens/</link>
      <pubDate>Thu, 29 Dec 2016 11:50:45 +0100</pubDate>
      
      <guid>https://celeborn2bealive.github.io/opengl-avance/01-introduction/liens/</guid>
      <description>&lt;p&gt;Voici une liste de liens utiles pour OpenGL:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://igm.univ-mlv.fr/~lnoel/index.php?section=teaching&amp;amp;teaching=opengl&amp;amp;teaching_section=tds&#34;&gt;http://igm.univ-mlv.fr/~lnoel/index.php?section=teaching&amp;amp;teaching=opengl&amp;amp;teaching_section=tds&lt;/a&gt; Les TDs d&amp;rsquo;OpenGL 3+ en Imac 2&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ogldev.atspace.co.uk/&#34;&gt;http://ogldev.atspace.co.uk/&lt;/a&gt; Des tutoriaux OpenGL 3+&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.g-truc.net/project-0026.html#menu&#34;&gt;http://www.g-truc.net/project-0026.html#menu&lt;/a&gt; Une énorme liste d&amp;rsquo;exemples de code OpenGL&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.prideout.net/modern-opengl-prezo/&#34;&gt;http://github.prideout.net/modern-opengl-prezo/&lt;/a&gt; La philosophie OpenGL moderne&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A avoir toujours sous la main:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.khronos.org/opengl/wiki/Main_Page&#34;&gt;https://www.khronos.org/opengl/wiki/Main_Page&lt;/a&gt; Le Wiki OpenGL&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.gl/&#34;&gt;http://docs.gl/&lt;/a&gt; Une version digeste de la documentation OpenGL/GLSL&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.khronos.org/files/opengl44-quick-reference-card.pdf&#34;&gt;https://www.khronos.org/files/opengl44-quick-reference-card.pdf&lt;/a&gt; La reference card OpenGL 4.4&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>